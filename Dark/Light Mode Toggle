##Step 1: Install Theme Switcher Dependency
##The easiest way is to use next-themes, which works perfectly with Tailwind.
npm install next-themes
##Update tailwind.config.js
##Enable dark mode (class-based):
// tailwind.config.js
module.exports = {
  darkMode: "class", // <- add this line
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
##Step 3: Wrap App in Theme Provider
##Open pages/_app.js (or _app.tsx) and wrap your app:
import { ThemeProvider } from "next-themes";
import "../styles/globals.css";

function MyApp({ Component, pageProps }) {
  return (
    <ThemeProvider attribute="class">
      <Component {...pageProps} />
    </ThemeProvider>
  );
}

export default MyApp;
##Step 4: Create Dark/Light Toggle Button
##You can put this in your navbar component (e.g., components/Navbar.js) or wherever you want the toggle:
import { useTheme } from "next-themes";
import { useEffect, useState } from "react";

export default function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  // Avoid hydration mismatch
  useEffect(() => setMounted(true), []);

  if (!mounted) return null;

  return (
    <button
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="px-4 py-2 rounded-lg border shadow-md 
                 bg-gray-100 dark:bg-gray-800 
                 text-gray-800 dark:text-gray-100 
                 transition-all duration-300"
    >
      {theme === "dark" ? "☀️ Light Mode" : "🌙 Dark Mode"}
    </button>
  );
}
##Step 5: Apply Dark Styles
##Now you can use Tailwind’s dark: modifier anywhere.
<div className="bg-white text-black dark:bg-gray-900 dark:text-white">
  <h1 className="text-4xl font-bold">Trigger.dev</h1>
  <p className="mt-2">Background jobs made easy 🚀</p>
</div>
